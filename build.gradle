plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url "https://api.modrinth.com/maven"  }

	maven { url = "https://maven.parchmentmc.org" } // Parchment mappings

	maven { url = "https://mvn.devos.one/releases" } // Porting Lib releases
	maven { url = "https://mvn.devos.one/snapshots" } // Create and several dependencies
	maven { url = "https://maven.tterrag.com/" } // Flywheel
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
	maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" } // Forge Config API Port

	maven { // Fabric ASM for Porting Lib
		url = "https://jitpack.io/"
		content { includeGroupAndSubgroups("com.github") }
	}

	maven { url = "https://maven.shedaniel.me" } // Cloth Config, REI
	maven { url = "https://maven.blamejared.com" } // JEI

	maven { url = "https://maven.terraformersmc.com/releases" } // Mod Menu, EMI
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"create-harder" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "maven.modrinth:every-compat:1.20-2.7.26-fabric"
	modImplementation "maven.modrinth:moonlight:fabric_1.20-2.13.82"

	modImplementation "maven.modrinth:moonlight:fabric_1.20-2.13.82"

	// Create - dependencies are added transitively
	modImplementation("com.simibubi.create:create-fabric-${project.minecraft_version}:${project.create_version}")

	modLocalRuntime("dev.emi:emi-fabric:${project.emi_version}")

//	// Development QOL
//	modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")
}

processResources {
	inputs.property "version", project.version
	duplicatesStrategy = "INCLUDE"

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

tasks.register('dataGenCopy') {
	doLast {
		copy {
			duplicatesStrategy = "INCLUDE"
			from(layout.getProjectDirectory().dir("src/main/generated/assets").dir(archives_base_name))
			into(layout.getProjectDirectory().dir("src/main/resources/assets").dir(archives_base_name))
		}
	}
	dependsOn(runDatagen)
}
